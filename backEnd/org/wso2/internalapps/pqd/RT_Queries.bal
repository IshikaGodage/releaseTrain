package org.wso2.internalapps.pqd;


const string GET_REDMINE_PROJECT_ID = "SELECT ROW_UPDATE_EPOCH_TIME_STAMP epochTime FROM RM_PROJECT WHERE PROJECT_ID=?";
const string INSERT_REDMINE_PROJECT = "INSERT INTO RM_PROJECT (PROJECT_ID,PROJECT_NAME,PROJECT_IDENTIFIER,PROJECT_DESCRIPTION,PROJECT_STATUS,PROJECT_IS_PUBLIC,PROJECT_CREATED_ON,PROJECT_UPDATE_ON,ROW_UPDATE_EPOCH_TIME_STAMP) VALUES (?,?,?,?,?,?,?,?,?)";
const string UPDATE_REDMINE_PROJECT = "UPDATE RM_PROJECT SET PROJECT_NAME=?, PROJECT_IDENTIFIER=?, PROJECT_DESCRIPTION=?, PROJECT_STATUS=?, PROJECT_IS_PUBLIC=?, PROJECT_CREATED_ON=?, PROJECT_UPDATE_ON=?, ROW_UPDATE_EPOCH_TIME_STAMP=? WHERE PROJECT_ID=?";

const string GET_REDMINE_USER_ID = "SELECT COUNT(*) rowCount FROM RM_USER WHERE USER_ID=?";
const string INSERT_REDMINE_USER = "INSERT INTO RM_USER (USER_ID,USER_FIRST_NAME,USER_LAST_NAME,USER_EMAIL,USER_CREATED_ON,USER_LAST_LOGIN_ON) VALUES (?,?,?,?,?,?)";

const string GET_ALL_REDMINE_PROJECTS_IDS = "SELECT PROJECT_ID ID FROM RM_PROJECT";
const string GET_REDMINE_VERSION_ID = "SELECT ROW_UPDATE_EPOCH_TIME_STAMP epochTime from RM_VERSION WHERE VERSION_ID=? and PARENT_PROJECT_ID=?";
const string INSERT_REDMINE_VERSION = "INSERT INTO RM_VERSION (VERSION_ID,PROJECT_ID,PARENT_PROJECT_ID,VERSION_NAME,VERSION_DESCRIPTION,VERSION_STATUS,VERSION_DUE_DATE,VERSION_SHARING,VERSION_MARKETING_DESCRIPTION,VERSION_CARBON_VERSION,VERSION_DEPENDS_ON,VERSION_VISION_DOCUMENT,VERSION_START_DATE,VERSION_RELEASE_MANAGER,VERSION_WARRANTY_MANAGER,VERSION_CREATED_ON,VERSION_UPDATED_ON,ROW_UPDATE_EPOCH_TIME_STAMP) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
const string UPDATE_REDMINE_VERSION = "Update RM_VERSION SET VERSION_NAME=?,VERSION_DESCRIPTION=?, VERSION_STATUS=?,VERSION_DUE_DATE=?, VERSION_SHARING=?, VERSION_MARKETING_DESCRIPTION=?, VERSION_CARBON_VERSION=?,  VERSION_DEPENDS_ON=?,VERSION_VISION_DOCUMENT=?, VERSION_START_DATE=?, VERSION_RELEASE_MANAGER=?, VERSION_WARRANTY_MANAGER=?, VERSION_CREATED_ON=?, VERSION_UPDATED_ON=?, ROW_UPDATE_EPOCH_TIME_STAMP=? WHERE VERSION_ID=? and PARENT_PROJECT_ID=?";

const string GET_REDMINE_ISSUE_ID = "SELECT ISSUE_UPDATED_ON,ROW_UPDATE_EPOCH_TIME_STAMP epochTime FROM RM_ISSUE WHERE ISSUE_ID=?";
const string INSERT_REDMINE_ISSUE = "INSERT INTO RM_ISSUE (ISSUE_ID,ISSUE_PROJECT_ID,ISSUE_PROJECT_NAME,ISSUE_TRACKER_ID,ISSUE_TRACKER_NAME,ISSUE_FIXED_VERSION_ID,ISSUE_FIXED_VERSION_NAME,ISSUE_TRACKER_SUBJECT,ISSUE_CREATED_ON,ISSUE_UPDATED_ON, ROW_UPDATE_EPOCH_TIME_STAMP) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
const string UPDATE_REDMINE_ISSUE = "UPDATE RM_ISSUE SET ISSUE_PROJECT_ID=?, ISSUE_PROJECT_NAME=?, ISSUE_TRACKER_ID=?, ISSUE_TRACKER_NAME=?, ISSUE_FIXED_VERSION_ID=?, ISSUE_FIXED_VERSION_NAME=?, ISSUE_TRACKER_SUBJECT=?, ISSUE_CREATED_ON=?, ISSUE_UPDATED_ON=?, ROW_UPDATE_EPOCH_TIME_STAMP=? WHERE ISSUE_ID=?";

const string GET_ALL_REDMINE_RELEASE_DATES = "SELECT VERSION_DUE_DATE AS releaseDate FROM RM_VERSION WHERE VERSION_DUE_DATE !=? AND VERSION_DUE_DATE > current_date() AND VERSION_DUE_DATE  GROUP BY VERSION_DUE_DATE ASC;";
const string GET_REDMINE_RELEASE_DETAILS = "SELECT a.VERSION_ID AS versionId,c.PROJECT_ID AS projectId,c.PROJECT_NAME AS releaseProduct,c.PRODUCT_AREA AS productArea,a.VERSION_NAME AS releaseVersion,d.USER_FIRST_NAME AS releaseManagerF,d.USER_LAST_NAME AS releaseManagerL,e.USER_FIRST_NAME AS warrantyManagerF,e.USER_LAST_NAME AS warrantyManagerL,a.VERSION_DUE_DATE AS start FROM RM_VERSION AS a LEFT JOIN  RM_MAPPING AS c ON a.PARENT_PROJECT_ID=c.PROJECT_ID LEFT JOIN RM_USER AS d ON a.VERSION_RELEASE_MANAGER=d.USER_ID LEFT JOIN RM_USER AS e ON a.VERSION_WARRANTY_MANAGER=e.USER_ID WHERE a.VERSION_DUE_DATE=?;";
const string GET_REDMINE_FEATURE_COUNT = "SELECT COUNT(*) AS featureCount FROM RM_VERSION a LEFT JOIN RM_ISSUE b  ON  a.VERSION_ID = b.ISSUE_FIXED_VERSION_ID LEFT JOIN RM_MAPPING c ON a.PARENT_PROJECT_ID=c.PROJECT_ID LEFT JOIN RM_USER d ON a.VERSION_RELEASE_MANAGER=d.USER_ID LEFT JOIN RM_USER e ON a.VERSION_WARRANTY_MANAGER=e.USER_ID WHERE a.VERSION_ID=? AND b.ISSUE_TRACKER_ID=?;";
const string GET_REDMINE_STORY_COUNT = "SELECT COUNT(*) AS storyCount FROM RM_VERSION a LEFT JOIN RM_ISSUE b  ON  a.VERSION_ID = b.ISSUE_FIXED_VERSION_ID LEFT JOIN RM_MAPPING c ON a.PARENT_PROJECT_ID=c.PROJECT_ID LEFT JOIN RM_USER d ON a.VERSION_RELEASE_MANAGER=d.USER_ID LEFT JOIN RM_USER e ON a.VERSION_WARRANTY_MANAGER=e.USER_ID WHERE a.VERSION_ID=? AND b.ISSUE_TRACKER_ID=?;";

const string GET_ALL_GITHUB_RELEASE_DATES = "SELECT distinct RELEASE_DATE FROM GH_RELEASES ORDER BY RELEASE_DATE ASC;";
const string GET_GITHUB_RELEASE_DETAILS = "SELECT a.ID AS gitVersionId,a.VERSION_NAME AS releaseVersion,a.RELEASE_DATE AS releaseDate, b.PROJECT_NAME AS releaseProduct,b.PROJECT_ID AS projectId, c.PRODUCT_AREA AS productArea FROM GH_RELEASES a JOIN RM_PROJECT_TO_GITREPO_MAPPING b on a.REPO_NAME = b.GITHUB_REPO_NAME JOIN RM_MAPPING c on b.PROJECT_ID = c.PROJECT_ID  WHERE a.RELEASE_DATE=?";
const string GET_GITHUB_TO_REDMINE_VERSION_ID = "SELECT VERSION_ID AS versionId FROM RM_VERSION WHERE VERSION_NAME =? AND   PROJECT_ID=?";
const string GET_REDMINE_MANAGERS = "SELECT b.USER_FIRST_NAME AS releaseManagerF, b.USER_LAST_NAME AS releaseManagerL,c.USER_FIRST_NAME AS warrantyManagerF,c.USER_LAST_NAME AS warrantyManagerL FROM RM_VERSION a LEFT JOIN RM_USER AS b ON a.VERSION_RELEASE_MANAGER=b.USER_ID LEFT JOIN RM_USER AS c ON a.VERSION_WARRANTY_MANAGER=c.USER_ID WHERE a.VERSION_ID = ? AND a.PARENT_PROJECT_ID = ?";
const string GET_GITHUB_REDMINE_STORY_COUNT = "SELECT count(*) AS storiesCount FROM RM_ISSUE  WHERE ISSUE_FIXED_VERSION_ID = ? AND ISSUE_PROJECT_ID = ? AND ISSUE_TRACKER_ID =?";
const string GET_GITHUB_REDMINE_FEATURE_COUNT = "SELECT count(*) AS featuresCount FROM RM_ISSUE  WHERE ISSUE_FIXED_VERSION_ID = ? AND ISSUE_PROJECT_ID = ? AND ISSUE_TRACKER_ID =?";

const string GET_ALL_REDMINE_RELEASE_DATES_BY_PRODUCT_AREA = "SELECT a.VERSION_DUE_DATE AS releaseDate FROM RM_VERSION AS a LEFT JOIN  RM_MAPPING AS c ON a.PARENT_PROJECT_ID=c.PROJECT_ID WHERE a.VERSION_DUE_DATE !=? AND c.PRODUCT_AREA=? AND VERSION_DUE_DATE > current_date() AND VERSION_DUE_DATE  GROUP BY VERSION_DUE_DATE ASC;";
const string GET_REDMINE_RELEASE_DETAILS_BY_PRODUCT_AREA = "SELECT a.VERSION_ID AS versionId,c.PROJECT_ID AS projectId,c.PROJECT_NAME AS releaseProduct,c.PRODUCT_AREA AS productArea,a.VERSION_NAME AS releaseVersion,d.USER_FIRST_NAME AS releaseManagerF,d.USER_LAST_NAME AS releaseManagerL,e.USER_FIRST_NAME AS warrantyManagerF,e.USER_LAST_NAME AS warrantyManagerL,a.VERSION_DUE_DATE AS start from RM_VERSION AS a LEFT JOIN  RM_MAPPING AS c ON a.PARENT_PROJECT_ID=c.PROJECT_ID LEFT JOIN RM_USER AS d ON a.VERSION_RELEASE_MANAGER=d.USER_ID LEFT JOIN RM_USER AS e ON a.VERSION_WARRANTY_MANAGER=e.USER_ID WHERE a.VERSION_DUE_DATE=? AND c.PRODUCT_AREA=?;";
const string GET_REDMINE_FEATURE_COUNT_BY_PRODUCT_AREA = "SELECT COUNT(*) AS featureCount FROM RM_VERSION a LEFT JOIN RM_ISSUE b  ON  a.VERSION_ID = b.ISSUE_FIXED_VERSION_ID LEFT JOIN RM_MAPPING c ON a.PARENT_PROJECT_ID=c.PROJECT_ID LEFT JOIN RM_USER d ON a.VERSION_RELEASE_MANAGER=d.USER_ID LEFT JOIN RM_USER e ON a.VERSION_WARRANTY_MANAGER=e.USER_ID WHERE a.VERSION_ID=? AND b.ISSUE_TRACKER_ID=? AND c.PRODUCT_AREA=?;";
const string GET_REDMINE_STORY_COUNT_BY_PRODUCT_AREA = "SELECT COUNT(*) AS storyCount FROM RM_VERSION a LEFT JOIN RM_ISSUE b  ON  a.VERSION_ID = b.ISSUE_FIXED_VERSION_ID LEFT JOIN RM_MAPPING c ON a.PARENT_PROJECT_ID=c.PROJECT_ID LEFT JOIN RM_USER d ON a.VERSION_RELEASE_MANAGER=d.USER_ID LEFT JOIN RM_USER e ON a.VERSION_WARRANTY_MANAGER=e.USER_ID WHERE a.VERSION_ID=? AND b.ISSUE_TRACKER_ID=? AND c.PRODUCT_AREA=?;";

const string GET_ALL_GITHUB_RELEASE_DATES_BY_PRODUCT_AREA = "SELECT distinct a.RELEASE_DATE FROM GH_RELEASES a JOIN RM_PROJECT_TO_GITREPO_MAPPING b ON a.REPO_NAME= b.GITHUB_REPO_NAME JOIN RM_MAPPING c ON b.PROJECT_ID = c.PROJECT_ID WHERE c.PRODUCT_AREA=? ORDER BY a.RELEASE_DATE ASC;";
const string GET_GITHUB_RELEASE_DETAILS_BY_PRODUCT_AREA = "SELECT a.ID AS gitVersionId,a.VERSION_NAME AS releaseVersion,a.RELEASE_DATE AS releaseDate, b.PROJECT_NAME AS releaseProduct,b.PROJECT_ID AS projectId, c.PRODUCT_AREA AS productArea FROM GH_RELEASES a JOIN RM_PROJECT_TO_GITREPO_MAPPING b on a.REPO_NAME = b.GITHUB_REPO_NAME JOIN RM_MAPPING c on b.PROJECT_ID = c.PROJECT_ID  WHERE a.RELEASE_DATE=? and c.PRODUCT_AREA=?";
const string GET_GITHUB_TO_REDMINE_VERSION_ID_BY_PRODUCT_AREA = "SELECT VERSION_ID AS versionId FROM RM_VERSION where VERSION_NAME =? AND   PROJECT_ID=? ";
const string GET_REDMINE_MANAGERS_BY_PRODUCT_AREA = "SELECT b.USER_FIRST_NAME AS releaseManagerF, b.USER_LAST_NAME AS releaseManagerL,c.USER_FIRST_NAME AS warrantyManagerF,c.USER_LAST_NAME AS warrantyManagerL FROM RM_VERSION a LEFT JOIN RM_USER AS b ON a.VERSION_RELEASE_MANAGER=b.USER_ID LEFT JOIN RM_USER AS c ON a.VERSION_WARRANTY_MANAGER=c.USER_ID WHERE a.VERSION_ID = ? AND a.PARENT_PROJECT_ID = ?";
const string GET_GITHUB_REDMINE_STORY_COUNT_PRODUCT_AREA = "SELECT count(*) AS storiesCount FROM RM_ISSUE  WHERE ISSUE_FIXED_VERSION_ID = ? AND ISSUE_PROJECT_ID = ? AND ISSUE_TRACKER_ID =?";
const string GET_GITHUB_REDMINE_FEATURE_COUNT_BY_PRODUCT_AREA = "SELECT count(*) AS featuresCount FROM RM_ISSUE  WHERE ISSUE_FIXED_VERSION_ID = ? AND ISSUE_PROJECT_ID = ? AND ISSUE_TRACKER_ID =?";

const string GET_MANAGER_ALL_REDMINE_RELEASES_DETAILS = "SELECT a.VERSION_ID AS versionId,c.PROJECT_ID AS projectId,c.PROJECT_NAME AS releaseProduct,c.PRODUCT_AREA AS productArea,a.VERSION_NAME AS releaseVersion,d.USER_FIRST_NAME AS releaseManagerF,d.USER_LAST_NAME AS releaseManagerL,e.USER_FIRST_NAME AS warrantyManagerF,e.USER_LAST_NAME AS warrantyManagerL,a.VERSION_DUE_DATE AS start FROM RM_VERSION AS a LEFT JOIN RM_MAPPING AS c ON a.PARENT_PROJECT_ID=c.PROJECT_ID LEFT JOIN RM_USER AS d ON a.VERSION_RELEASE_MANAGER=d.USER_ID LEFT JOIN RM_USER AS e ON a.VERSION_WARRANTY_MANAGER=e.USER_ID WHERE a.VERSION_DUE_DATE BETWEEN ? AND ? ORDER BY a.VERSION_DUE_DATE ASC;";
const string GET_MANAGER_SINGLE_REDMINE_RELEASE_DETAILS = "SELECT a.VERSION_ID AS versionId,c.PROJECT_ID AS projectId,c.PROJECT_NAME AS releaseProduct,c.PRODUCT_AREA AS productArea,a.VERSION_NAME AS releaseVersion,d.USER_FIRST_NAME AS releaseManagerF,d.USER_LAST_NAME AS releaseManagerL,e.USER_FIRST_NAME AS warrantyManagerF,e.USER_LAST_NAME AS warrantyManagerL,a.VERSION_DUE_DATE AS start from RM_VERSION as a LEFT JOIN RM_MAPPING AS c ON a.PARENT_PROJECT_ID=c.PROJECT_ID LEFT JOIN RM_USER AS d ON a.VERSION_RELEASE_MANAGER=d.USER_ID LEFT JOIN RM_USER AS e ON a.VERSION_WARRANTY_MANAGER=e.USER_ID WHERE a.VERSION_DUE_DATE BETWEEN ? AND ? AND c.PRODUCT_AREA =? ORDER BY a.VERSION_DUE_DATE ASC;";
const string GET_MANAGER_REDMINE_FEATURE_COUNT = "SELECT COUNT(*) AS featureCount FROM RM_VERSION a LEFT JOIN RM_ISSUE b  ON  a.VERSION_ID = b.ISSUE_FIXED_VERSION_ID LEFT JOIN RM_MAPPING c ON a.PARENT_PROJECT_ID=c.PROJECT_ID LEFT JOIN RM_USER d ON a.VERSION_RELEASE_MANAGER=d.USER_ID LEFT JOIN RM_USER e ON a.VERSION_WARRANTY_MANAGER=e.USER_ID WHERE a.VERSION_ID=? AND b.ISSUE_TRACKER_ID=?;";
const string GET_MANAGER_REDMINE_STORY_COUNT = "SELECT COUNT(*) AS storyCount FROM RM_VERSION a LEFT JOIN RM_ISSUE b  ON  a.VERSION_ID = b.ISSUE_FIXED_VERSION_ID LEFT JOIN RM_MAPPING c ON a.PARENT_PROJECT_ID=c.PROJECT_ID LEFT JOIN RM_USER d ON a.VERSION_RELEASE_MANAGER=d.USER_ID LEFT JOIN RM_USER e ON a.VERSION_WARRANTY_MANAGER=e.USER_ID WHERE a.VERSION_ID=? AND b.ISSUE_TRACKER_ID=?;";

const string GET_TRACKER_SUBJECTS = "SELECT ISSUE_TRACKER_SUBJECT AS subject ,ISSUE_ID AS issueId FROM RM_ISSUE WHERE ISSUE_TRACKER_ID=? AND ISSUE_FIXED_VERSION_ID=?;";

const string GET_GITHUB_REPO_NAMES = "SELECT GITHUB_REPO_NAME AS repoName FROM RM_PROJECT_TO_GITREPO_MAPPING WHERE PROJECT_ID=?";
const string GET_REDMINE_VERSION_NAMES = "SELECT VERSION_NAME AS versionName FROM RM_VERSION WHERE VERSION_ID=?";

const string GET_GITHUB_REPO_NAME_AND_VERSION_NAME = "SELECT REPO_NAME AS repoName,VERSION_NAME AS gitVersionName FROM GH_RELEASES WHERE ID=?";

const string GET_ALL_REPOSITORIES = "SELECT  GITHUB_REPO_NAME FROM RM_PROJECT_TO_GITREPO_MAPPING WHERE GITHUB_REPO_NAME != ?";
const string GITHUB_VERSION_CHECK = "SELECT COUNT(*) AS count FROM GH_RELEASES WHERE REPO_NAME=?";
const string GITHUB_RELEASES_INSERT= "INSERT INTO GH_RELEASES (REPO_NAME,VERSION_NAME,RELEASE_DATE,CURSOR_NAME) VALUES (?,?,?,?)";
const string GET_LAST_CURSOR_NAME = "SELECT CURSOR_NAME FROM GH_RELEASES WHERE REPO_NAME = ?  ORDER BY ID  DESC LIMIT 1" ;
